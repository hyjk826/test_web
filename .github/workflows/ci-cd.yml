name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update image tag in Helm values
      run: |
        # Docker 이미지 태그를 최신 커밋 SHA로 업데이트
        IMAGE_TAG=${GITHUB_SHA:0:7}
        sed -i "s|repository: nginx|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|g" testweb/values.yaml
        sed -i "s|tag: \"\"|tag: \"${IMAGE_TAG}\"|g" testweb/values.yaml
        
        # 변경사항을 커밋하고 푸시
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add testweb/values.yaml
        git commit -m "Update image tag to ${IMAGE_TAG}" || exit 0
        git push

    - name: Trigger ArgoCD sync
      run: |
        echo "ArgoCD가 자동으로 새로운 이미지를 감지하고 배포를 시작합니다."
        echo "ArgoCD UI에서 배포 상태를 확인하세요."
